• abstract
• static
• final
• synchronize
• native
• strictfp
• transient
• volatile


synchronized - a synchronized method cannot be accessed by multiple threads concurrently. You can't mark classes, interfaces, or variables
               with this modifier.


native - A native method calls and makes use of libraries and method implementated in other programming languages such as C or C++.
         You can't mark classes, interfaces, or variables with this modifier.


transient - A transient variable isn't serialized when the corresponding object is serialized. The transient modifier cannot be applied to
            classes, interfaces, or methods.


volatile - A volatile variable's value can be safely modified by different threads. Classes, interfaces and methods cannot use this modifier.

strictfp - Classes, interfaces and methods defined using this keyword ensure that calculations using floating-point numbers are identical on
           all platforms. This modifier cannot be used with variables.


abstract - When the abstract keyword is prefixed to the definition of a concrete class, it changes it to an abstract class, even if the class
           doesn't define any abstract methods.


           // this is a valid abstract class
           abstract class Person {
              private String name;
              public void displayName() { }
           }

           An abstract class CANNOT be instantiated.
           
           Person p = new Person();
                      ^
                      Person is abstract, cannot be instantiated


            Abstract Interface
           --------------------
           An interface is an abstract entity by default. The Java compiler automatically adds the keyword abstract to the definition
           of an interface.
           The following definitions of interfaces are the same:

           interface Movable {}
           abstract interface Movable { }

            Abstract Method
           -----------------
           An abstract method does not have a body. Usually an abstract method is implemented by a derived class.
           
           abstract class Person {
              private String name;
              public void displayName() { }      -->   This isn't an abstract method, it has an empty body.
              public abstract void perform();   -->   This is an abstract method.
           }


           ** Variables cannot be defined as abstract. Compiler error!


final - Can be used with the declaration of a class, variable or method.
        Cannot be used with the declaration of an interface.

         final class
        -------------
        Cannot be extended by any other class.
        
        final class Person { }
        class Professor extends Person { }   -->   Won't compile!
        
        
         final interface
        -----------------
        An interface cannot be marked as final.
        
        final interface MyInterface { }   -->  Won't compile!
        
        
         final variable 
        ----------------
        A final variable cannot be reassigned a value. It can be assigned only once.
        
        class Person {
           final long MAX_AGE = 90;
           
           Person() {
              MAX_AGE = 95;    -->   Compiler Error !!
           }
        }
        
        
        class Person {
           final StringBuilder name = new StringBuilder("Abhi");
           
           Person() {
              name.append("nav");        -->   VALID
              name = new StringBuilder   -->   Compiler Error !
           }
        }
        
         final method 
        --------------
        A final method in the base class cannot be overridden by a derived class.
        
        class Person {
           final void sing() {
              System.out.println("la..la..la..");
           }
        }
        class Professor extends Person {
           void sing() {                                 -->   Compiler Error !
           System.out.println("Alpha..Beta..Gamma");
        }